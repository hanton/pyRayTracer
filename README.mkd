##pypyRayTracer - a Ray Tracer in PyPy

####Vision-> Physics(radiometry)-> Math(the rendering equation)-> Python-> Screen Pixels

##Features
##### * Camera : `Pinhole Camera`
##### * Sampler: `Multijittered Sampler`, `Regular Sampler`
##### * Texture: `Image Texture`
##### * BRDF: `Diffuse`, `Glossy Specular`, `Mirror Specular`
##### * Light: `Ambient Light`, `Point Light`, `Direction Light`,  `Area Light`
##### * `Ambient Occlusion`
##### * `Shadow`
##### * Geometry: `Sphere`, `Plane`, `Rectangle`

##Examples
####Direction Illumination
![](https://github.com/hanton/pypyRayTracer/blob/master/Render/Direction%20Illumination_16.png?raw=true)
####Ambient Occlusion
![](https://github.com/hanton/pypyRayTracer/blob/master/Render/Ambient%20Occlusion.png?raw=true)
####Area Light
![](https://github.com/hanton/pypyRayTracer/blob/master/Render/Area%20Light.png?raw=true)

##How to Run
#####`pypy pyRayTracer` - to render a default 640*320 with 4 pixel samples picture
or 
#####`pypy pyRayTracer width height pixel_samples` - to render a width*height with number pixel samples picture
#####
If you have not installed PyPy, Python is still OK, but a lot slower...
#####`python pyRayTracer` - to render a default 640*320 with 4 pixel samples picture
or 
#####`python pyRayTracer width height pixel_samples` - to render a width*height with number pixel samples picture

##Reference: 
* Ray Tracing from the Ground Up by Kevin Suffern
* Physically Based Rendering: From Theory To Implementation by Matt Pharr, Greg Humphreys
* Advanced Global Illumination by Philip Dutre, Philippe Bekaert and Kavita Bala
* Mitsuba Renderer : http://www.mitsuba-renderer.org
* LuxRender : http://www.luxrender.net
    
    
GitHub: https://github.com/hanton/pypyRayTracer
